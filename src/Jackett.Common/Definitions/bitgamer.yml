---
id: bitgamer
name: bitGAMER
description: "bitGAMER is a Private Torrent Tracker for GAMES."
language: en-US
type: private
encoding: UTF-8
links:
  - https://bitgamer.ch/

caps:
  # TODO: Previous feedback indicated that [`Foo/Other` should only be used when the
  # content in the indexer's version of the category is
  # distinct](https://github.com/Jackett/Jackett/pull/15892#discussion_r1985900883). On
  # further thought, given that a system of hierarchical categories is meant to support
  # refining results beyond the top-level categories, I would think that all items
  # should be in one of the subcategories, and that subcategory should be `Foo/Other` if
  # no other subcategory fits. Otherwise, if a user is trying to refine their search and
  # reduce noise, it's reasonable for them to expect that `Foo/Other` would only
  # eliminate items in the other subcategories. But if the approach from the previous
  # feedback is used, then they are unknowingly eliminating items of the kind they want
  # to find. What are the counter arguments and/or use cases that support the previous
  # feedback?
  #
  # TODO: [How should a contributor approach an indexer like
  # this](https://discord.com/channels/264387956343570434/1028840523106107394/1349193243182497852)
  # that has an `Adult Games` category, but neither `PC/*` nor `Console/*` have a
  # `*/XXX` and `XXX/*` doesn't have a `XXX/PC` or `XXX/Console`. I'm not looking for an
  # answer to that specific question, I"m looking for how to approach that case *and
  # other* similarly ambiguous cases. Maybe pick the closest `PC/*` nor `Console/*`
  # category since the tracker is software-focused and not XXX-focused? What if the
  # tracker is general and doesn't have a focus either way? Maybe there are some cases
  # where there's no better option than flipping a coin, but maybe I'm missing a better
  # way to think about it?
  categorymappings:
    - {id: 0, cat: Other, desc: "all types"}
    - {id: 1, cat: PC/Games, desc: "Adult Games"}
    - {id: 3, cat: PC, desc: "Burning/Ripping Tools"}
    - {id: 4, cat: Books/Other, desc: "Guides/Game Documents"}
    - {id: 13, cat: Movies/Other, desc: "Movies/TV/Video"}
    - {id: 48, cat: Audio/Other, desc: "Music/OST"}
    - {id: 52, cat: PC, desc: "Amiga"}
    - {id: 18, cat: PC/Mobile-iOS, desc: "Apple - iPhone/iPod/iPad"}
    - {id: 54, cat: Console/Other, desc: "Arcade"}
    - {id: 19, cat: Console/Other, desc: "Atari"}
    - {id: 51, cat: Console/Other, desc: "Commodore 64"}
    - {id: 22, cat: PC/Mobile-Android, desc: "Google - Android"}
    - {id: 61, cat: PC, desc: "Hyperspin"}
    - {id: 24, cat: Console/XBox, desc: "Microsoft - Xbox"}
    - {id: 25, cat: Console/XBox 360, desc: "Microsoft - Xbox 360"}
    - {id: 49, cat: Console/XBox 360, desc: "Microsoft - Xbox 360 JTAG"}
    - {id: 57, cat: Console/XBox One, desc: "Microsoft - Xbox One"}
    - {id: 27, cat: Console/Other, desc: "Neo Geo"}
    - {id: 55, cat: Console/3DS, desc: "Nintendo - 3DS"}
    - {id: 28, cat: Console/NDS, desc: "Nintendo - DS"}
    - {id: 29, cat: Console/Other, desc: "Nintendo - Game Boy Advance"}
    - {id: 30, cat: Console/Other, desc: "Nintendo - Gameboy"}
    - {id: 31, cat: Console/Other, desc: "Nintendo - Gamecube "}
    - {id: 33, cat: Console/Other, desc: "Nintendo - N64 "}
    - {id: 35, cat: Console/Other, desc: "Nintendo - NES"}
    - {id: 50, cat: Console/Other, desc: "Nintendo - SNES"}
    - {id: 63, cat: Console/Other, desc: "Nintendo - Switch"}
    - {id: 37, cat: Console/Wii, desc: "Nintendo - Wii"}
    - {id: 59, cat: Console/WiiU, desc: "Nintendo - Wii U"}
    - {id: 53, cat: PC, desc: "PC - DOS"}
    - {id: 64, cat: PC, desc: "PC - Linux"}
    - {id: 39, cat: PC/Mac, desc: "PC - Mac OS X"}
    - {id: 40, cat: PC, desc: "PC - Windows"}
    - {id: 41, cat: Console/Other, desc: "Sega"}
    - {id: 42, cat: Console/Other, desc: "Sega - Dreamcast"}
    - {id: 43, cat: Console/Other, desc: "Sega - Megadrive"}
    - {id: 44, cat: Console/Other, desc: "Sony - Playstation"}
    - {id: 45, cat: Console/Other, desc: "Sony - Playstation 2"}
    - {id: 46, cat: Console/PS3, desc: "Sony - Playstation 3"}
    - {id: 56, cat: Console/PS4, desc: "Sony - Playstation 4"}
    - {id: 47, cat: Console/PSP, desc: "Sony - Playstation Portable "}
    - {id: 58, cat: Console/PS Vita, desc: "Sony - Playstation Vita"}

  modes:
    search: [q]
    tv-search: [q]
    movie-search: [q]
    music-search: [q]
    book-search: [q]
  allowrawsearch: true

settings:
  - name: username
    type: text
    label: Username
  - name: password
    type: password
    label: Password
  - name: freeleech
    type: checkbox
    label: Search freeleech only
    default: false
  - name: sort
    type: select
    label: Sort requested from site
    default: 4
    options:
      4: created
      7: seeders
      5: size
      1: title
  - name: type
    type: select
    label: Order requested from site
    default: desc
    options:
      desc: desc
      asc: asc

login:
  path: takelogin.php
  method: post
  inputs:
    username: "{{ .Config.username }}"
    password: "{{ .Config.password }}"
  error:
    - selector: >-
        td:has(:contains("Login failed"))
  test:
    path: my.php
    selector: a[href^="logout.php"]

search:
  paths:
    - path: browse.php
  inputs:
    search: "{{ .Keywords }}"
    # There are checkboxes for categories but selecting them seems to be overriden by
    # the `<select name="cat">` dropdown and has no effect:
    category: 0
    # 0: name, 1: descr, 2: both
    blah: 0
    # 0: include dead, 1: alive, 2: dead, 3: freeleech
    incldead: >-
      {{ if .Config.freeleech }}3{{ else }}0{{ end }}
    sort: >-
      {{ .Config.sort }}
    type: >-
      {{ .Config.type }}

  rows:
    # The HTML for this indexer's web UI is badly malformed: duplicate opening `<table>`
    # tags, unclosed elements, etc.. For example, the selector copied from Chrome
    # developer tools does *not* work but the selector copied from FireFox *does*
    # work:
    selector: >-
      .outer > form > table > tbody > tr:has(a[href^="download.php"])

  fields:
    category:
      selector: >-
        a[href^="browse.php?cat="]
      attribute: href
      filters:
        - name: querystring
          args: cat
    title:
      selector: >-
        a[href^="details.php"][title]
      attribute: title
    details:
      selector: >-
        a[href^="details.php"]
      attribute: href
    download:
      selector: >-
        a[href^="download.php"]
      attribute: href
    date:
      # Found several examples of old torrents with `0000-00-00 00:00:00` dates but no
      # examples of pre-times:
      selector: >-
        td:nth-child(5):not(:contains("000-00-0000:00:00"))
      filters:
        - name: append
          args: " +00:00" # Etc/UTC
        - name: dateparse
          args: "yyyy-MM-ddHH:mm:ss zzz"
      optional: true
    size:
      selector: >-
        td:nth-child(6)
    seeders:
      selector: >-
        td:nth-child(10)
    leechers:
      selector: >-
        td:nth-child(11)
    grabs:
      selector: >-
        td:nth-child(7)
    downloadvolumefactor:
      case:
        img[src*="/freeleech.png"]: 0
        "*": 1
    # https://bitgamer.ch/forums.php?action=viewtopic&topicid=52
    minimumratio:
      text: 1.0
    minimumseedtime:
      # 2 days (as seconds = 2 x 24 x 60 x 60)
      text: 172800
# engine n/a
